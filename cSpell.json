{
  "language": "en",
  "version": "0.1",
  "words": [
    "Linq",
    "intellisense",
    "nunit",
    "NUnit",
    "paramref",
    "typeparam",
    "typeparamref",
    "wiki",
    "ruleset",
    "DWORD",
    "Serializable",
    "Parallelizable",
    "nameof",
    "typeof",
    "nuget",
    "VSIX",
    "vstest",
    "parallelization",
    "hotfix",
    "teamcity",
    "runtimes",
    "PDBs",
    "Randomizer",
    "unmanaged",
    "prefilter",
    "Guid",
    "Guids",
    "Enumerables",
    "buildable",
    "hotfixes",
    "VSIXes",
    "CODEPAGE",
    "ints",
    "ULPs",
    "Ulps",
    "nuspecs",
    "combinatorially",
    "Remoting",
    "Hashtable",
    "writability",
    "Pluggable",
    "Obsoletion",
    "JetBrains",
    "ReSharper",
    "Dogfood",
    "Silverlight",
    "seamlessness",
    "composability"
  ],
  "ignoreWords": [
    "addin",
    "addins",
    "langword",
    "ushort",
    "ulong",
    "iarray",
    "sarray",
    "idict",
    "onetimesetup",
    "onetimeteardown",
    "testfixture",
    "setupfixture",
    "datapoint",
    "datapoints",
    "sbyte",
    "IntelliTests",
    "IntelliTest",
    "shadowcopy",
    "testcase",
    "Testcase",
    "netcoreapp",
    "netcore",
    "nunitlite",
    "nunitagent",
    "tracelevel",
    "vssettings",
    "notabug",
    "norepro",
    "wontfix",
    "easyfix",
    "nupkg",
    "Terje",
    "Prouse",
    "runsettings",
    "aolszowka",
    "Letterle",
    "Fixtureparams",
    "tipsandtricks",
    "Musser",
    "Sandstrom",
    "Idfor",
    "editorconfig",
    "Testgenerator",
    "HKCU",
    "testcasecount",
    "inputfiles",
    "inprocess",
    "testlist",
    "configfile",
    "appbase",
    "classname",
    "runstate",
    "fullname",
    "teardowns",
    "Halvorsen",
    "iunequal",
    "cppsample",
    "SSCLI",
    "Afterxxx",
    "activeconfig",
    "netstandard",
    "Gallio",
    "Codice",
    "mytest",
    "Rebracer",
    "myassembly",
    "FULLNAMES",
    "markdownlint",
    "netcorefactory",
    "rprouse",
    "Blazor",
    "WASM",
    "methodname",
    "netfx",
    "snupkg"
  ],
  "ignoreRegExpList": [
    "\\((.*)\\)", // Markdown links
    "uid: (.*)", // uid lines,
    "```[a-z]*\n[\\s\\S]*?\n```", // Markdown code blocks. h/t https://coderwall.com/p/r6b4xg/regex-to-match-github-s-markdown-code-blocks,
    "\\`([^\\`].*?)\\`" // inline code blocks. h/t https://stackoverflow.com/questions/41274241/how-to-capture-inline-markdown-code-but-not-a-markdown-code-fence-with-regex
  ]
}
