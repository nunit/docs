{
    "version": "0.1",
    "language": "en",
    "words": [
        "buildable",
        "choco",
        "chocolatey",
        "CODEPAGE",
        "Codespaces",
        "combinatorially",
        "composability",
        "discoverability",
        "Dogfood",
        "DWORD",
        "Enumerables",
        "Guid",
        "Guids",
        "Hashtable",
        "hotfix",
        "hotfixes",
        "intellisense",
        "ints",
        "JetBrains",
        "Linq",
        "nameof",
        "nuget",
        "nunit",
        "NUnit",
        "nuspecs",
        "Obsoletion",
        "Parallelizable",
        "parallelization",
        "paramref",
        "PDBs",
        "Pluggable",
        "prefilter",
        "Randomizer",
        "Remoting",
        "ReSharper",
        "ruleset",
        "runtimes",
        "seamlessness",
        "Serializable",
        "Silverlight",
        "teamcity",
        "Tracelog",
        "typeof",
        "typeparam",
        "typeparamref",
        "Ulps",
        "ULPs",
        "unmanaged",
        "VSIX",
        "VSIXes",
        "vstest",
        "wiki",
        "writability",
        "yourfoldername"
    ],
    "ignoreWords": [
        "addin",
        "addins",
        "langword",
        "ushort",
        "ulong",
        "iarray",
        "sarray",
        "idict",
        "onetimesetup",
        "onetimeteardown",
        "testfixture",
        "setupfixture",
        "datapoint",
        "datapoints",
        "sbyte",
        "IntelliTests",
        "IntelliTest",
        "shadowcopy",
        "testcase",
        "Testcase",
        "netcoreapp",
        "netcore",
        "nunitlite",
        "nunitagent",
        "tracelevel",
        "vssettings",
        "notabug",
        "norepro",
        "wontfix",
        "easyfix",
        "nupkg",
        "Terje",
        "Prouse",
        "runsettings",
        "aolszowka",
        "Letterle",
        "Fixtureparams",
        "tipsandtricks",
        "Musser",
        "Sandstrom",
        "Idfor",
        "editorconfig",
        "Testgenerator",
        "HKCU",
        "testcasecount",
        "inputfiles",
        "inprocess",
        "testlist",
        "configfile",
        "appbase",
        "classname",
        "runstate",
        "fullname",
        "teardowns",
        "Halvorsen",
        "iunequal",
        "cppsample",
        "SSCLI",
        "Afterxxx",
        "activeconfig",
        "netstandard",
        "Gallio",
        "Codice",
        "mytest",
        "Rebracer",
        "myassembly",
        "FULLNAMES",
        "markdownlint",
        "netcorefactory",
        "pakrym",
        "rprouse",
        "Blazor",
        "WASM",
        "methodname",
        "netfx",
        "snupkg",
        "testparam",
        "gleb",
        "osokin",
        "lahma",
        "unsortable",
        "Dalsb√∏"
    ],
    "patterns": [
        {
          "name": "Markdown links",
          "pattern": "\\((.*)\\)",
          "description": ""
        },
        {
          "name": "Markdown code blocks",
          "pattern": "/^(\\s*`{3,}).*[\\s\\S]*?^\\1/gmx",
          "description": "Taken from the cSpell example at https://cspell.org/configuration/patterns/#verbose-regular-expressions"
        },
        {
          "name": "Inline code blocks",
          "pattern": "\\`([^\\`\\r\\n]+?)\\`",
          "description": "https://stackoverflow.com/questions/41274241/how-to-capture-inline-markdown-code-but-not-a-markdown-code-fence-with-regex"
        },
        {
          "name": "Link contents",
          "pattern": "\\<a(.*)\\>",
          "description": ""
        },
        {
          "name": "Snippet references",
          "pattern": "-- snippet:(.*)",
          "description": ""
        },
        {
          "name": "Snippet references 2",
          "pattern": "\\<\\[sample:(.*)",
          "description": "another kind of snippet reference"
        },
        {
          "name": "Multi-line code blocks",
          "pattern": "/^\\s*```[\\s\\S]*?^\\s*```/gm"
        },
        {
          "name": "HTML Tags",
          "pattern": "<[^>]*>",
          "description": "Reference: https://stackoverflow.com/questions/11229831/regular-expression-to-remove-html-tags-from-a-string"
        },
        {
            "name": "UID Lines",
            "pattern": "uid: (.*)"
        }
      ],
      "ignoreRegExpList": [
        "Markdown links",
        "Markdown code blocks",
        "Inline code blocks",
        "Link contents",
        "Snippet references",
        "Snippet references 2",
        "Multi-line code blocks",
        "HTML Tags",
        "UID Lines"
      ]
}
